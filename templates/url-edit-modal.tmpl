{{define "url-edit-modal"}}
<div class="modal fade modal-lg" id="urlModal" tabindex="-1" aria-labelledby="urlModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="urlModalLabel">New URL</h5>
			</div>
			<div class="modal-body">
				<form id="data-form">
					<div class="mb-3">
						<label for="origin-url" class="form-label">Origin URL</label>
						<div class="input-group" id="origin-url" aria-descripedby="origin-url-help">
							<input type="text" class="form-control" id="subdomainInput" placeholder="Subdomain" name="subdomain" style="width: 10em">
							<span class="input-group-text"><code>.{{ getHostname }}/</code></span>
							<input type="text" class="form-control" id="pathInput" placeholder="Path" name="path" style="width: 10em">
							<button class="btn btn-outline-secondary" type="button" id="shufflePathBtn">ðŸŽ²</button>
						</div>
						<div id="origin-url-help" class="form-text">
							You can also leave the subdomain or path blank
						</div>
					</div>

					<div class="mb-3">
						<label for="targetInput" class="form-label">Target URL</label>
						<input type="url" class="form-control" id="targetInput" placeholder="https://example.com" name="target-url">
					</div>
					<div class="mb-3">
						<label for="commentInput" class="form-label">Comment</label>
						<textarea class="form-control" id="commentInput" style="height: 100px" name="comment"></textarea>
					</div>
					<div class="mb-3">
						<label class="form-label">Other Attributes</label>
						<div class="form-check form-switch mb-3">
							<input class="form-check-input" role="switch" type="checkbox" value="" name="is-public" id="isPublicInput">
							<label class="form-check-label" for="isPublicInput">Should be publicly visible</label>
						</div>
					</div>
				</form>
				<span class="text-danger" id="error-text"></span>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" id="acceptBtn">Create URL</button>
			</div>
		</div>
	</div>
</div>

<script>
	window.addEventListener('load', function () {
	const urlModal = document.getElementById('urlModal')
	const _originalHTML = urlModal.innerHTML
	urlModal.addEventListener('show.bs.modal', function (event) {
		// Button that triggered the modal
		let button = event.relatedTarget
		let update_data = undefined 

		// check if button is an edit button / has data
		if (button.hasAttribute('data-bs-edit-with')) {
			update_data = JSON.parse(button.getAttribute('data-bs-edit-with'))

			urlModal.querySelector("#urlModalLabel").textContent = `Edit URL - #${update_data.Id}`
			urlModal.querySelector("#acceptBtn").textContent = "Save"

			urlModal.querySelector("#subdomainInput").value = update_data.Subdomain
			urlModal.querySelector("#pathInput").value = update_data.Path
			urlModal.querySelector("#targetInput").value = update_data.Target
			urlModal.querySelector("#commentInput").value = update_data.Comment
			urlModal.querySelector("#isPublicInput").checked = update_data.IsPublic
		} else {
			urlModal.innerHTML = _originalHTML
		}

		urlModal.querySelector("#shufflePathBtn").onclick = () => {
			urlModal.querySelector("#pathInput").value = generateUUID(8)
		}

		urlModal.querySelector("#acceptBtn").onclick = () => {
			let form = urlModal.querySelector("#data-form")
			let data = Object.fromEntries(new FormData(form).entries())

			/* checkboxes need some extra code, as forms have some weird
			behavior in recards to their working.
			Essentialy: the name of the checkbox is included in the form
			with their value attribute, iff they are checked. Otherwise the
			property isn't mentioned at all in the form data.
			As such I need to add them myself. */
			urlModal.querySelectorAll("[type=checkbox]").forEach((e) => {
				data[e.getAttribute("name")] = e.checked
			})


			if (update_data != undefined) {
				data["id"] = update_data["Id"]
			} else {
				data["id"] = 0
			}


			let httpReq = new XMLHttpRequest();
			httpReq.onreadystatechange = () => {
				if (httpReq.readyState == httpReq.DONE) {
					if (httpReq.status != 200) {
						let message = JSON.parse(httpReq.responseText)
						urlModal.querySelector("#error-text").innerText = message.message
					} else {
						bootstrap.Modal.getInstance(urlModal).hide()
						window.location.reload()
					}
				}
			}

			httpReq.open("POST", (update_data != undefined) ? "/api/url/update" : "/api/url/add", true)
			httpReq.setRequestHeader('Content-Type', 'application/json')
			httpReq.send(JSON.stringify(data))
		}
	})
})
</script>
{{end}}
